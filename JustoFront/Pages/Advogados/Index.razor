@page "/advogados/index"
@using Commom.models.Advogados
@using Justo.Entities.Entidades
@using JustoFront.Pages.Advogados
@using JustoFront.Services.Interface
@inject IAdvogadoService AdvogadoService 
@inject IJSRuntime JsRunTime
@inject NavigationManager Navigation
@* @attribute [Authorize(Roles = "Admin")] *@


@if (AdvogadosLista != null && AdvogadosLista.Count > 0)
{

    <h3>Painel de Advogados</h3>

    @if (AdvogadosLista == null)
    {
        <span><em>Carregando...</em></span>
    }

    else
    {
        <button class="btn btn-primary" @onclick="AdicionarAdvogado">
            <i class="bi bi-plus-square"></i>Adicionar
        </button>
        <table class="table table-hover">
            <thead style="text-align:center;">
                <tr>
                    <th>Nome</th>
                    <th>OAB</th>
                    <th>Cpf</th>
                    <th>Editar</th>
                    <th>Remover</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Advogado in AdvogadosListaComId)
                {
                    <tr>
                        <td>
                            @if (!string.IsNullOrEmpty(Advogado.Nome))
                            {
                                <span>@Advogado.Nome</span>
                            }
                            else
                            {
                                <span>Advogado sem Nome cadastrado.</span>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(Advogado.Oab))
                            {
                                <span>@Advogado.Oab</span>
                            }
                            else
                            {
                                <span>Advogado sem Oab cadastrado.</span>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(Advogado.Cpf))
                            {
                                <span>@Advogado.Cpf</span>
                            }
                            else
                            {
                                <span>Advogado sem CPF cadastrado.</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="@(e => AbrirModal(Advogado))">Ver Detalhes</button>
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="@(e => DeletarAdvogado(Advogado))">Remover Advogado</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else
{
<button class="btn btn-primary" @onclick="AdicionarAdvogado">
    <i class="bi bi-plus-square"></i>Adicionar
</button>
<p>Nenhum Advogado encontrado.</p>

}
<ModalAdvogadoEdit AdvogadoModal="AdvogadoSelecionado" ModalVisivel="ModalAbertoEdit" OnClose="FecharModal" />
<ModalAdvogadoAdd ModalVisivel="ModalAbertoAdd" OnClose="FecharModal" />

@code {
    public List<AdvogadoDTO> AdvogadosLista { get; set; } = new();
    public List<Advogado> AdvogadosListaComId { get; set; } = new();




    private bool ModalAbertoAdd = false;
    private bool ModalAbertoEdit = false;
    public AdvogadoDTO AdvogadoSelecionado = new();

    protected override async Task OnInitializedAsync()
    {
        AdvogadosListaComId = await AdvogadoService.GetAdvogadosComIdAsync();
        var advogadosComId = await AdvogadoService.GetAdvogadosComIdAsync();

        // Limpa a lista de AdvogadoDTO se necessário (opcional).
        AdvogadosLista.Clear();

        // Converte cada Advogado para AdvogadoDTO e adiciona à lista de DTOs.
        foreach (var advogado in advogadosComId)
        {
            var advogadoDto = new AdvogadoDTO
                {
                    Id = advogado.Id,
                    Nome = advogado.Nome,
                    Cpf = advogado.Cpf,
                    Oab = advogado.Oab
                };

            AdvogadosLista.Add(advogadoDto);
        }


    }
    public void AbrirModal(Advogado advogado)
    {
        AdvogadoSelecionado = new AdvogadoDTO
            {
                Id = advogado.Id,
                Nome = advogado.Nome,
                Cpf = advogado.Cpf,
                Oab = advogado.Oab
            };
        ModalAbertoEdit = true;
        StateHasChanged();
    }
    public async Task DeletarAdvogado(Advogado advogado)
    {
        var confirmed = await JsRunTime.InvokeAsync<bool>("confirm", "Deseja mesmo remover esse advogado?");
        if (confirmed)
        {
            // O usuário clicou em OK, coloque o código de remoção aqui
            // Por exemplo, chamar um serviço para remover o advogado do banco de dados
            var deletaadvogado = await AdvogadoService.DeleteAdvogadoAsync(advogado.Id);
            if(deletaadvogado.IsSuccessStatusCode)
            {
                await JsRunTime.InvokeVoidAsync("alert", $"{advogado.Nome} removido com sucesso");
                StateHasChanged();
                Navigation.NavigateTo("/");
                Navigation.NavigateTo("/Advogados/index");
            }
            else
            {
                await JsRunTime.InvokeVoidAsync("alert", deletaadvogado);

            }

        }
        else
        {
            await JsRunTime.InvokeVoidAsync("alert", "Remoção cancelada.");
            StateHasChanged();
        }
    }
    public void FecharModal()
    {
        ModalAbertoEdit = false;
        ModalAbertoAdd = false;
        StateHasChanged();
    }

    public void AdicionarAdvogado()
    {
        ModalAbertoAdd = true;
        StateHasChanged();
    }
}