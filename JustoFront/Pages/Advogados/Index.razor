@page "/advogados/index"
@layout LayoutMudBlazor
@using MudBlazor
@using Commom.models.Advogados
@using Justo.Entities.Entidades
@using JustoFront.Pages.Advogados
@using JustoFront.Services.Interface
@inject IAdvogadoService AdvogadoService
@inject IJSRuntime JsRunTime
@inject NavigationManager Navigation
@inject IDialogService DialogService

@if (AdvogadosLista != null && AdvogadosLista.Count > 0)
{
    <h3>Painel de Advogados</h3>

    @if (AdvogadosLista == null)
    {
        <span><em>Carregando...</em></span>
    }
    else
    {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AdicionarAdvogado" Disabled>
            <MudIcon Icon="Icons.Material.Filled.Add" /> Adicionar
        </MudButton>
        <MudSimpleTable Items="AdvogadosListaComId" Hover="true" Breakpoint="Breakpoint.Sm">
            <MudTh>Nome</MudTh>
            <MudTh>Oab</MudTh>
            <MudTh>Cpf</MudTh>
            <MudTh>Editar</MudTh>
            <MudTh>Remover</MudTh>
            @foreach (var registro in AdvogadosListaComId)
            {
                <MudTr>
                    <MudTd DataLabel="Nome">@registro.Nome</MudTd>
                        <MudTd DataLabel="Oab">@registro.Oab</MudTd>
                        <MudTd DataLabel="Cpf">@registro.Cpf</MudTd>
                            <MudTd>
                            <MudButton OnClick="() => OpenDialog(registro)" Variant="Variant.Filled" Color="Color.Primary" Disabled>
                                Detalhes
                         </MudButton>
                     </MudTd>
                     <MudTd>
                     <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(e => DeletarAdvogado(registro))">Remover Advogado</MudButton>
                     </MudTd>
                 </MudTr>
            }
        </MudSimpleTable>
    }
}
else
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AdicionarAdvogado">
        <MudIcon Icon="Icons.Material.Filled.Add" /> Adicionar
    </MudButton>
    <p>Nenhum Advogado encontrado.</p>
}

@code {
    public List<AdvogadoDTO> AdvogadosLista { get; set; } = new();
    public List<Advogado> AdvogadosListaComId { get; set; } = new();

    private bool ModalAbertoAdd = false;
    private bool ModalAbertoEdit = false;
    public AdvogadoDTO AdvogadoSelecionado = new();

    protected override async Task OnInitializedAsync()
    {
        AdvogadosListaComId = await AdvogadoService.GetAdvogadosComIdAsync();
        var advogadosComId = await AdvogadoService.GetAdvogadosComIdAsync();

        AdvogadosLista.Clear();

        foreach (var advogado in advogadosComId)
        {
            var advogadoDto = new AdvogadoDTO
                {
                    Id = advogado.Id,
                    Nome = advogado.Nome,
                    Cpf = advogado.Cpf,
                    Oab = advogado.Oab
                };

            AdvogadosLista.Add(advogadoDto);
        }
    }

    public void AbrirModal(Advogado advogado)
    {
        AdvogadoSelecionado = new AdvogadoDTO
            {
                Id = advogado.Id,
                Nome = advogado.Nome,
                Cpf = advogado.Cpf,
                Oab = advogado.Oab
            };
        ModalAbertoEdit = true;
        StateHasChanged();
    }

    public async Task DeletarAdvogado(Advogado advogado)
    {
        var confirmed = await JsRunTime.InvokeAsync<bool>("confirm", "Deseja mesmo remover esse advogado?");
        if (confirmed)
        {
            var deletaadvogado = await AdvogadoService.DeleteAdvogadoAsync(advogado.Id);
            if (deletaadvogado.IsSuccessStatusCode)
            {
                await JsRunTime.InvokeVoidAsync("alert", $"{advogado.Nome} removido com sucesso");
                StateHasChanged();
                Navigation.NavigateTo("/");
                Navigation.NavigateTo("/advogados/index");
            }
            else
            {
                await JsRunTime.InvokeVoidAsync("alert", "Erro ao remover advogado");
            }
        }
        else
        {
            await JsRunTime.InvokeVoidAsync("alert", "Remoção cancelada.");
            StateHasChanged();
        }
    }

    public void FecharModal()
    {
        ModalAbertoEdit = false;
        ModalAbertoAdd = false;
        StateHasChanged();
    }

    public void AdicionarAdvogado()
    {
        ModalAbertoAdd = true;
        StateHasChanged();
    }
    private bool license_accepted = false;

    async Task OpenDialog(Advogado advogado)
    {
        var advogadoDTO = new AdvogadoDTO
            {
                Id = advogado.Id,
                Nome = advogado.Nome,
                Cpf = advogado.Cpf,
                Oab = advogado.Oab
            };

        var parameters = new DialogParameters { { "AdvogadoModal", advogadoDTO } };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var result = await DialogService.Show<ModalAdvogadoEdit>("Editar Advogado", parameters, options).Result;

        if (!result.Canceled)
        {
            license_accepted = (bool)(result.Data ?? false);
        }
    }
}
