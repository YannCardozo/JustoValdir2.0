@page "/Usuarios/index"
@using Commom.models.Usuarios
@using Entities.Entidades
@using JustoFront.Services
@using Justo.Entities
@using MudBlazor
@layout LayoutMudBlazor
@inject IUsuarioService UsuarioService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<h3>Painel de Usuários</h3>

@if (usuarios == null)
{
    <span><em>Carregando...</em></span>
}
else if (usuarios.Count == 0)
{
    <p>Nenhum usuário encontrado.</p>
}
else
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AdicionarUsuario">
        <MudIcon Icon="Icons.Material.Filled.Add" /> Adicionar
    </MudButton>
    <MudSimpleTable Style="margin-top: 50px !important;" Class="mt-5" Hover="true" Bordered="true">
        <MudTh>Id</MudTh>
        <MudTh>Usuário</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>CPF</MudTh>
        <MudTh>Perfil</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Detalhes</MudTh>
        <MudTh>Remover</MudTh>
        @foreach (var registro in usuarios)
            {
                <MudTr>
                    <MudTd DataLabel="Id">@registro.Id</MudTd>
                    <MudTd DataLabel="Usuário">@registro.UserName</MudTd>
                    <MudTd DataLabel="Email">@registro.Email</MudTd>
                    <MudTd DataLabel="CPF">@registro.CPF</MudTd>
                    <MudTd DataLabel="Perfil">@(registro.Roles != null ? string.Join(", ", registro.Roles) : "Usuário sem perfil cadastrado.")</MudTd>
                    @if (@registro.EmailConfirmed == true)
                    {
                        <MudTd>
                            <MudButton Variant="Variant.Filled" Color="Color.Tertiary">Ativo</MudButton>
                        </MudTd>
                    }
                    else
                    {
                        <MudTd>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Inativo</MudButton>
                        </MudTd>
                    }
                    <MudTd>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(e => AbrirModal(registro))">Ver Detalhes</MudButton>
                    </MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(e => RemoverUsuario(registro))">Remover</MudButton>
                    </MudTd>
                </MudTr>
            }

    </MudSimpleTable>
}

<ModalPainelEdit UsuarioModal="usuarioSelecionado" ModalVisivel="ModalAbertoEdit" OnClose="FecharModal" />
<ModalPainelAdd ModalVisivel="ModalAbertoAdd" OnClose="FecharModal" />


@code {
    private List<UsuarioComRole> usuarios;
    private bool ModalAbertoAdd = false; 
    private bool ModalAbertoEdit = false;
    public UsuarioComRole usuarioSelecionado = new();

    protected override async Task OnInitializedAsync()
    {
        usuarios = await UsuarioService.GetUsuariosAsync();
    }

    public void AbrirModal(UsuarioComRole usuario)
    {
        usuarioSelecionado = usuario;
        ModalAbertoEdit = true;
        StateHasChanged();
    }

    public void FecharModal()
    {
        ModalAbertoEdit = false;
        ModalAbertoAdd = false;
        StateHasChanged();
    }

    public void AdicionarUsuario()
    {
        ModalAbertoAdd = true;
        StateHasChanged();
    }
    public async Task RemoverUsuario(UsuarioComRole usuario)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Deseja mesmo remover este usuário?");
        if (confirmed)
        {
            // Primeiro, localize o ApplicationUser correspondente pelo CPF
            var usuarioParaRemover = await UsuarioService.GetUsuarioByCpfAsync(usuario.CPF);
            if (usuarioParaRemover != null)
            {
                // Procede com a remoção usando o ID do ApplicationUser encontrado
                var resultadoRemocao = await UsuarioService.DeleteUserAsync(usuarioParaRemover.CPF);
                //erro esta AQUI, PRECISA VERIFICAR PQ N ESTA VINDO SUCCESS
                if (resultadoRemocao.IsSuccessStatusCode)
                {
                    await JsRuntime.InvokeVoidAsync("alert", $"{usuarioParaRemover.UserName} removido com sucesso");
                    StateHasChanged();
                    Navigation.NavigateTo("/");
                    Navigation.NavigateTo("/Usuarios/index");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("alert", $"Falha ao remover o usuário: {usuarioParaRemover.UserName}.");
                }
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", $"usuário: {usuarioParaRemover.UserName} não encontrado.");
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Remoção de usuário cancelado.");
            StateHasChanged();
        }
    }
}
