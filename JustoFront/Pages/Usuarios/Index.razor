@page "/Usuarios/index"
@using Commom.models.Usuarios
@using Entities.Entidades
@using JustoFront.Services
@using Justo.Entities
@using MudBlazor
@layout LayoutMudBlazor
@inject IUsuarioService UsuarioService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inject IDialogService DialogService

<h3>Painel de Usuários</h3>

@if (usuarios == null)
{
    <span><em>Carregando...</em></span>
}
else if (usuarios.Count == 0)
{
    <p>Nenhum usuário encontrado.</p>
}
else
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AdicionarUsuario">
        <MudIcon Icon="Icons.Material.Filled.Add" /> Adicionar
    </MudButton>
    <MudSimpleTable Style="margin-top: 50px !important;" Class="mt-5" Hover="true" Bordered="true">
        <MudTh>Usuário</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>CPF</MudTh>
        <MudTh>Perfil</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Detalhes</MudTh>
        <MudTh>Remover</MudTh>
        @foreach (var registro in usuarios)
        {
            <MudTr>
                <MudTd DataLabel="Usuário">@registro.UserName</MudTd>
                <MudTd DataLabel="Email">@registro.Email</MudTd>
                <MudTd DataLabel="CPF">@registro.CPF</MudTd>
                <MudTd DataLabel="Perfil">@(registro.Roles != null ? string.Join(", ", registro.Roles) : "Usuário sem perfil cadastrado.")</MudTd>
                @if (@registro.EmailConfirmed == true)
                {
                    <MudTd>
                        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Block" OnClick="@((e => DesativarUsuario(registro.Email)))">Ativo</MudButton>
                    </MudTd>
                }
                else
                {
                    
                    <MudTd>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@((e => AtivarUsuario(registro.Email)))">Inativo</MudButton>
                    </MudTd>
                }
                <MudTd>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(e => EditarUsuario(registro))">Ver Detalhes</MudButton>
                </MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Bolt" Color="Color.Error" OnClick="@(e => RemoverUsuario(registro))">Remover</MudButton>
                </MudTd>
            </MudTr>
        }

    </MudSimpleTable>
}

@code {
    private List<UsuarioComRole> usuarios;
    private bool ModalAbertoAdd = false;
    private bool ModalAbertoEdit = false;
    public UsuarioComRole usuarioSelecionado = new();
    private string email;
    private string mensagem;

    private IDialogReference dialogReference;

    private void EditarUsuario(UsuarioComRole usuario)
    {
        var parameters = new DialogParameters
            {
                ["UsuarioParametro"] = usuario
            };

        dialogReference = DialogService.Show<ModalPainelUsuarioEdit>("Editar Usuário", parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        usuarios = await UsuarioService.GetUsuariosAsync();
    }

    public void AdicionarUsuario()
    {
        dialogReference = DialogService.Show<ModalPainelUsuarioAdiciona>("Adicionar Usuário");
    }

    public void FecharModal()
    {
        ModalAbertoEdit = false;
        ModalAbertoAdd = false;
        dialogReference?.Close();
        StateHasChanged();
    }

    public async Task RemoverUsuario(UsuarioComRole usuario)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Deseja mesmo remover este usuário?");
        if (confirmed)
        {
            var usuarioParaRemover = await UsuarioService.GetUsuarioByCpfAsync(usuario.CPF);
            if (usuarioParaRemover != null)
            {
                var resultadoRemocao = await UsuarioService.DeleteUserAsync(usuarioParaRemover.CPF);
                if (resultadoRemocao.IsSuccessStatusCode)
                {
                    await JsRuntime.InvokeVoidAsync("alert", $"{usuarioParaRemover.UserName} removido com sucesso");
                    StateHasChanged();
                    Navigation.NavigateTo("/");
                    Navigation.NavigateTo("/Usuarios/index");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("alert", $"Falha ao remover o usuário: {usuarioParaRemover.UserName}.");
                }
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", $"usuário: {usuarioParaRemover.UserName} não encontrado.");
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Remoção de usuário cancelado.");
            StateHasChanged();
        }
    }

    public async Task AtivarUsuario(string email)
    {
        try
        {
            var response = await UsuarioService.AtivarUsuarioEmail(email);

            if (response.IsSuccessStatusCode)
            {
                mensagem = "Usuário ativado com sucesso!";
                await JsRuntime.InvokeVoidAsync("alert", mensagem);
                StateHasChanged();
                Navigation.NavigateTo("/");
                Navigation.NavigateTo("/Usuarios/index");
            }
            else
            {
                mensagem = "Falha ao ativar o usuário.";
                await JsRuntime.InvokeVoidAsync("alert", mensagem);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            mensagem = $"Erro: {ex.Message}";
        }
    }

    public async Task DesativarUsuario(string email)
    {
        try
        {
            var response = await UsuarioService.DesativarUsuarioEmail(email);

            if (response.IsSuccessStatusCode)
            {
                mensagem = "Usuário desativado com sucesso!";
                await JsRuntime.InvokeVoidAsync("alert", mensagem);
                StateHasChanged();
                Navigation.NavigateTo("/");
                Navigation.NavigateTo("/Usuarios/index");
            }
            else
            {
                mensagem = "Falha ao desativar o usuário.";
                await JsRuntime.InvokeVoidAsync("alert", mensagem);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            mensagem = $"Erro: {ex.Message}";
        }
    }
}
