@using Commom.models.Usuarios
@using JustoFront.Services
@inject IUsuarioService UsuarioService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@if (ModalVisivel)
{
    <div class="modal show" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Adicionar Usuário</h5>
                    <button type="button" class="close" aria-label="Close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @if (UsuarioModal != null)
                    {
                        <EditForm Model="UsuarioModal">
                            <DataAnnotationsValidator />
                            <div class="row g-3 align-items-center">
                                <div class="col-12">
                                    <label for="inputUserName" class="col-form-label">Usuário:</label>
                                    <InputText class="form-control" @bind-Value="UsuarioModal.UserName" id="inputUserName" />
                                    <ValidationMessage For="@(() => UsuarioModal.UserName)" />
                                </div>
                                <div class="col-12 mt-2">
                                    <label for="inputEmail" class="col-form-label">Email:</label>
                                    <InputText class="form-control" @bind-Value="UsuarioModal.Email" id="inputEmail" />
                                    <ValidationMessage For="@(() => UsuarioModal.Email)" />
                                </div>
                                <div class="col-12 mt-2">
                                    <label for="inputCpf" class="col-form-label">CPF:</label>
                                    <InputText class="form-control" @bind-Value="UsuarioModal.CPF" id="inputCpf" />
                                    <ValidationMessage For="@(() => UsuarioModal.CPF)" />
                                </div>
                                <div class="col-12 mt-2">
                                    <label for="inputPassword" class="col-form-label">Senha:</label>
                                    <div class="input-group">
                                        <InputText type="@passwordInputType" class="form-control" @bind-Value="UsuarioModal.Password" id="inputPassword" />
                                        <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </div>
                                    <ValidationMessage For="@(() => UsuarioModal.Password)" />
                                </div>
                                <div class="col-12 mt-2">
                                    <label for="inputPerfis" class="col-form-label">Perfis:</label>
                                    <InputSelect class="form-control" @bind-Value="UsuarioModal.RoleSelecionado" id="inputPerfis">
                                        <option disabled selected value="">Selecione um perfil</option>
                                        @foreach (var role in Roles)
                                        {
                                            <option value="@role">@role</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => UsuarioModal.RoleSelecionado)" />
                                </div>
                            </div>
                        </EditForm>

                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="SalvarModal">Salvar</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Fechar</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private bool showPassword = true;
    private string passwordInputType => showPassword ? "text" : "password";
    private string passwordIcon => showPassword ? "-slash" : "";

    [Parameter]
    public bool ModalVisivel { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public UsuarioComRoleSenha UsuarioModal { get; set; } = new();

    private void CloseModal()
    {
        ModalVisivel = false;
        OnClose.InvokeAsync(ModalVisivel);
    }

    private List<string> Roles { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Roles = await UsuarioService.GetRolesAsync();
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task SalvarModal()
    {
        // HttpResponseMessage response;
        // if (TipoCrud == "Update")
        // {
        //     response = await UsuarioService.UpdateUserAsync(UsuarioModal);
        // }
        // else
        // {
        //     response = await UsuarioService.CreateUsuarioAsync(UsuarioModal);
        // }

        // if (response.IsSuccessStatusCode)
        // {
        //     string mensagem = TipoCrud == "Update" ? "Usuário atualizado com sucesso." : "Usuário criado com sucesso.";
        //     await JSRuntime.InvokeVoidAsync("alert", mensagem);
        //     await InvokeAsync(StateHasChanged);
        //     CloseModal();
        // }
        // else
        // {
        //     var errorContent = await response.Content.ReadAsStringAsync();
        //     string mensagemErro = TipoCrud == "Update" ? "Erro ao atualizar usuário: " : "Erro ao criar usuário: ";
        //     await JSRuntime.InvokeVoidAsync("alert", mensagemErro + errorContent);
        // }
        // Roles = await UsuarioService.GetRolesAsync();
        // Navigation.NavigateTo("/Painel");
    }
}