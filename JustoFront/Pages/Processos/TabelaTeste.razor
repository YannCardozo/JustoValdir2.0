@page "/testetabela"
@layout LayoutMudBlazor
@using System.Net.Http.Json
@using Justo.Entities.Entidades
@using JustoFront.Services
@using JustoFront.Services.Interface
@using MudBlazor
@inject IDialogService DialogService
@inject IProcessoService ProcessoService
@inject IPoloService PoloService


<MudTable Style="margin-top: 50px !important;" Class="mt-5" Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Processo,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Processos</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Cliente</MudTh>
        <MudTh>CodPJEC</MudTh>
        <MudTh>PJECAcao</MudTh>
        <MudTh>TituloProcesso</MudTh>
        <MudTh>Valor Da Causa</MudTh>
        <MudTh>Movimentação Processual</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Cliente">@PoloCliente.NomeParte</MudTd>
        <MudTd DataLabel="CodPJEC">@context.CodPJEC</MudTd>
        <MudTd DataLabel="PJECAcao">@context.PJECAcao</MudTd>
        <MudTd DataLabel="TituloProcesso">@context.TituloProcesso</MudTd>
        <MudTd DataLabel="Valor Da Causa">@context.ValorDaCausa</MudTd>
        <MudTd>
            <MudButton OnClick="() => OpenDialog(context.Id)" Variant="Variant.Filled" Color="Color.Primary">
                Movimentação
            </MudButton>
        </MudTd>
@*         <MudTd>
            <a href="/testetabela/@context.Id">
                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowOutward" Color="Color.Primary">Movimentação</MudButton>
            </a>
        </MudTd> *@
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <!--Filtros da tabela no rodape dela.-->
@*     <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer /> *@
    <div style="min-width:200px;">
        @if(selectedItem1 != null)
        {
            <MudText Inline="true" Class="align-self-center">Selecionado: @selectedItem1?.CodPJEC</MudText>

        }
    </div>
</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private Processo selectedItem1 = null;
    public List<Processo> lstProcessos { get; set; } = new List<Processo>();
    private IEnumerable<Processo> Elements = new List<Processo>();
    public List<Polo> PoloComProcesso = new();
    public Polo PoloCliente = new();

    public int ProcessoId = 1;

    protected override async Task OnInitializedAsync()
    {
        lstProcessos = await ProcessoService.GetAllProcessosAsync();
        PoloComProcesso = await PoloService.ListarPolos();
        Elements = lstProcessos;
        await CarregarPolo();
    }

    public async Task CarregarPolo()
    {
        foreach (var registro in PoloComProcesso)
        {
            if (registro.CPFAdvogado == "152.489.457-55" || registro.NomeAdvogado == "NATALI CORDEIRO MARQUES" || registro.OAB == "RJ253001")
            {
                PoloCliente = new()
                    {
                        ProcessoId = registro.ProcessoId,
                        Id = registro.Id, // Substitua por um valor adequado, se necessário
                        NomeParte = registro.NomeParte,
                        TipoParte = registro.TipoParte,
                        CPFCNPJParte = registro.CPFCNPJParte,
                        NomeAdvogado = registro.NomeAdvogado,
                        CPFAdvogado = registro.CPFAdvogado,
                        OAB = registro.OAB,
                        Nome = registro.Nome, // Substitua por um valor adequado, se necessário
                        DataCadastro = registro.DataCadastro, // Substitua por DateTime.Now ou outro valor adequado, se necessário
                        CadastradoPor = registro.CadastradoPor, // Substitua por um valor adequado, se necessário
                        DataAtualizacao = registro.DataAtualizacao, // Substitua por DateTime.Now ou outro valor adequado, se necessário
                        AtualizadoPor = registro.AtualizadoPor // Substitua por um valor adequado, se necessário
                    };
            }
        }
    }












    private bool FilterFunc1(Processo element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Processo element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.CodPJEC.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PJECAcao.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private bool license_accepted = false;

    async Task OpenDialog(int ProcessoId)
    {
        var parameters = new DialogParameters { { "ProcessoId", ProcessoId } };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var result = await DialogService.Show<TesteModal>("Movimentação Processual", parameters, options).Result;

        if (!result.Canceled)
        {
            license_accepted = (bool)(result.Data ?? false);
        }
    }
}
